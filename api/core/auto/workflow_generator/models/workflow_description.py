"""
Workflow Description Model
Used to represent the simplified workflow description generated by large language models
"""

from typing import Optional

from pydantic import BaseModel, Field


class VariableDescription(BaseModel):
    """Variable description"""

    name: str
    type: str
    description: Optional[str] = None
    required: bool = True
    source_node: Optional[str] = None
    source_variable: Optional[str] = None


class OutputDescription(BaseModel):
    """Output description"""

    name: str
    type: str = "string"
    description: Optional[str] = None
    source_node: Optional[str] = None
    source_variable: Optional[str] = None


class NodeDescription(BaseModel):
    """Node description"""

    id: str
    type: str
    title: str
    description: Optional[str] = ""
    variables: Optional[list[VariableDescription]] = Field(default_factory=list)
    outputs: Optional[list[OutputDescription]] = Field(default_factory=list)

    # LLM node specific fields
    system_prompt: Optional[str] = None
    user_prompt: Optional[str] = None
    provider: Optional[str] = "zhipuai"
    model: Optional[str] = "glm-4-flash"

    # Code node specific fields
    code: Optional[str] = None

    # Template node specific fields
    template: Optional[str] = None

    # Reference to workflow description, used for node relationship analysis
    workflow_description: Optional["WorkflowDescription"] = Field(default=None, exclude=True)

    class Config:
        exclude = {"workflow_description"}


class ConnectionDescription(BaseModel):
    """Connection description"""

    source: str
    target: str


class WorkflowDescription(BaseModel):
    """Workflow description"""

    name: str
    description: Optional[str] = ""
    nodes: list[NodeDescription]
    connections: list[ConnectionDescription]

    def __init__(self, **data):
        super().__init__(**data)
        # Add workflow description reference to each node
        for node in self.nodes:
            node.workflow_description = self
